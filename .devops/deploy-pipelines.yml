# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  NAMESPACE: 'messages'

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor

# Only manual activations are intended
trigger: none
pr: none

# resources:
#   repositories:
#     - repository: pagopaCommons
#       type: github
#       name: pagopa/azure-pipeline-templates
#       ref: refs/tags/v19
#       endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: 'ubuntu-latest'

stages:

#   # Create a relase
#   # Activated when ONE OF these are met:
#   # - is on branch master 
#   # - is a tag in the form v{version}-RELEASE
#   - stage: Release
#     condition:
#       and(
#         succeeded(),
#         or(
#           eq(variables['Build.SourceBranch'], 'refs/heads/master'),
#           and(
#             startsWith(variables['Build.SourceBranch'], 'refs/tags'),
#             endsWith(variables['Build.SourceBranch'], '-RELEASE')
#           )
#         )
#       )
#     jobs:
#       - job: make_release
#         steps:
#         - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
#           - template: templates/node-job-setup/template.yaml@pagopaCommons
#             parameters:
#               persistCredentials: true
#           - template: templates/node-github-release/template.yaml@pagopaCommons
#             parameters:
#               semver: '${{ parameters.RELEASE_SEMVER }}'
#               gitEmail: $(GIT_EMAIL)
#               gitUsername: $(GIT_USERNAME)
#               gitHubConnection: $(GITHUB_CONNECTION)

#         - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
#           - script: |
#               echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
#             displayName: 'Skip release bundle'

  # Build
  - stage: Build
    #dependsOn:
    #  - Release
    jobs:
      - job: 'build'
        steps:
          - task: Docker@2
            displayName: 'login'
            inputs:
              containerRegistry: 'io-p-messages-acr-docker-registry-prod'
              command: 'login'
      - job: 'build'
        script: |
          # docker will return 0 on success or 1 on failure.
          docker manifest inspect iopcommonacr/io-functions-service-messages:latest > /dev/null ;
          if [ $? -eq 0 ]; then
            echo "image already exist"
          else
            echo "new image"
            docker build -t iopcommonacr/io-functions-service-messages:$(Build.BuildId) .
            docker build -t iopcommonacr/io-functions-service-messages:latest .
            docker push iopcommonacr/io-functions-service-messages:$(Build.BuildId)
            docker push iopcommonacr/io-functions-service-messages:latest
          fi
      # - job: 'build'
      #   steps:
      #     - task: Docker@2
      #       displayName: 'Build_and_pubblish_image'
      #       inputs:
      #         containerRegistry: 'io-p-messages-acr-docker-registry-prod'
      #         repository: 'io-functions-service-messages'
      #         command: 'buildAndPush'
      #         buildContext: '$(Build.Repository.LocalPath)'
      #         tags: |
      #           $(Build.BuildId)
      #           latest

  - stage: 'Deploy'
    dependsOn:
     - Build
    jobs:
      - deployment: 'Deploy'
        pool:
          name: io-prod-linux
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                # - task: DownloadPipelineArtifact@2
                #   inputs:
                #     buildType: 'current'
                #     artifactName: 'helm'
                #     targetPath: '$(Pipeline.Workspace)/helm'
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: io-messages-aks-weu-beta
                    namespace: '$(NAMESPACE)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Build.Repository.LocalPath)/helm
                    chartName: io-functions-service-messages
                    releaseName: io-functions-service-messages
                    valueFile: "$(Build.Repository.LocalPath)/helm/values-beta.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 2m0s"
                # - task: KubernetesManifest@0
                #   displayName: Patch
                #   inputs:
                #     kubernetesServiceConnection: io-messages-aks-weu-beta
                #     namespace: '$(NAMESPACE)'
                #     action: patch
                #     kind: deployment
                #     name: '$(deploymentName)'
                #     mergeStrategy: strategic
                #     patch: '{"spec":{"template":{"metadata":{"annotations":{"buildNumber":"$(Build.BuildId)"}}}}}'