# Azure DevOps pipeline to build, check source codes and run tests.
#
# To make Danger JS run on a pull request you need to add the following pipeline 
# variable and set it with a GitHub access token (scope public_repo); otherwise 
# set its value to 'skip' without marking it secret: 
# - DANGER_GITHUB_API_TOKEN
# 

# Automatically triggered on PR
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#pr-trigger
trigger: none

# Execute agents (jobs) on latest Ubuntu version.
# To change OS for a specific, ovverride "pool" attribute inside the job definition
pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v18
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: Build
    dependsOn: []
    jobs:
      - job: make_build
        pool:
          # As we deploy on Wondows machines, we use Windows to build
          vmImage: 'windows-2019'         
        steps:
        - template: templates/node-job-setup/template.yaml@pagopaCommons
        - script: |
            yarn build
          displayName: 'Build'
  
  - stage: Static_analysis
    dependsOn: []
    jobs:

      - job: lint     
        steps:
        - template: templates/node-job-setup/template.yaml@pagopaCommons
        - script: |
            yarn lint
          displayName: 'Lint'

      - job: validate_api_specification     
        steps:
        - script: |
            npx oval validate -p openapi/index.yaml
          displayName: 'Validate API specification'

  # B) Run unit tests if there is a push or pull request on any branch.
  - stage: Test
    dependsOn: []
    jobs:
      - job: unit_tests
        steps:
        - template: templates/node-job-setup/template.yaml@pagopaCommons
        
        - script: |
            yarn generate
          displayName: 'Generate definitions'

        - script: |
            yarn test:coverage
          displayName: 'Unit tests exec'

        - bash: |
            bash <(curl -s https://codecov.io/bash)
          displayName: 'Code coverage'

  - stage: Integration_Tests
    dependsOn: []
    jobs:
      - job: integration_tests_ff_NONE
        steps:
        - template: templates/node-job-setup/template.yaml@pagopaCommons
        - script: |
            cd __integrations__
            sed -i 's/FF_TYPE=.*/FF_TYPE=none/g' environments/env.base
            cp environments/env.base environments/.env
            yarn install --frozen-lockfile
            yarn start
          displayName: 'Start test resources'
        - script: |
            yarn build
            cd __integrations__
            yarn install --frozen-lockfile
            sleep 30s
            docker exec fn-service-messages-testagent yarn test
          displayName: 'Execute tests'

      - job: integration_tests_ff_PROD
        steps:
        - template: templates/node-job-setup/template.yaml@pagopaCommons
        - script: |
            cd __integrations__
            sed -i 's/FF_TYPE=.*/FF_TYPE=prod/g' environments/env.base
            cp environments/env.base environments/.env
            yarn install --frozen-lockfile
            yarn start
          displayName: 'Start test resources'
        - script: |
            cd __integrations__
            yarn install --frozen-lockfile
            sleep 30s
            docker exec fn-service-messages-testagent yarn test
          displayName: 'Execute tests'
