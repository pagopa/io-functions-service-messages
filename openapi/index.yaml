swagger: '2.0'
info:
  version: 1.2.6
  title: IO API for service Messages
  contact:
    name: PagoPA
    url: https://forum.italia.it/c/progetto-io
  x-logo:
    url: https://io.italia.it/assets/img/io-logo-blue.svg
  description: >
    # Warning

    **This is an experimental API that is (most probably) going to change as we
    evolve the IO platform.**

    # Introduction

    This is the documentation of the IO API for App.
host: api.cd.italia.it
basePath: /api/v1
schemes:
  - https
security:
  - SubscriptionKey: []
paths:
  /ping:
    get:
      operationId: pingOperation
      summary: Ping
      description: Returns function's package name and version
      tags:
        - restricted
      responses:
        '200':
          description: Success.
        '500':
          description: Internal Server error
  /notify:
    post:
      operationId: notify
      summary: Notify a user
      description: Post the notification to the user using a push notification.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/NotificationInfo'
      responses:
        '204':
          description: Success.
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ProblemJson'
        '401':
          description: Token null or invalid.
        '403':
          description: Request not authorized.
        '404':
          description: Resource not found.
        '500':
          description: There was an error in forwarding the notification.
          schema:
            $ref: '#/definitions/ProblemJson'
      consumes:
        - application/json
      produces:
        - application/json
  /remote-contents/configurations:
    post:
      operationId: createRCConfiguration
      summary: Create a new remote-content configuration
      description: Create a new remote-content configuration using the provided payload
      security:
        - SubscriptionKey: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/NewRCConfiguration'
      responses:
        '201':
          schema:
            $ref: '#/definitions/RCConfigurationId'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ProblemJson'
        '500':
          description: There was an error creating the configuration.
          schema:
            $ref: '#/definitions/ProblemJson'
      consumes:
        - application/json
      produces:
        - application/json
definitions:
  RCConfigurationId:
    type: string
    description: Ulid string.
    format: Ulid
    x-import: '@pagopa/ts-commons/lib/strings'
    example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
  NewRCConfiguration:
    allOf:
      - $ref: '#/definitions/NewRCConfigurationBase'
      - $ref: '#/definitions/RCConfigurationEnvironment'
  NewRCConfigurationBase:
    type: object
    properties:
      userId:
        type: string
        minLength: 1
        description: User id.
      name:
        type: string
        minLength: 1
        description: Configuration name.
      description:
        type: string
        minLength: 1
        description: Configuration description.
      hasPrecondition:
        type: string
        x-extensible-enum:
          - ALWAYS
          - ONCE
          - NEVER
      disableLollipopFor:
        type: array
        items:
          type: string
          minLength: 1
          description: User for which lollipop should be disabled
      isLollipopEnabled:
        type: boolean
        description: Flag to check if lollipop is enabled
    required:
      - userId
      - name
      - description
      - hasPrecondition
      - disableLollipopFor
      - isLollipopEnabled
  RCConfigurationBase:
    allOf:
      - $ref: '#/definitions/NewRCConfigurationBase'
      - type: object
        properties:
          configurationId:
            type: string
            description: Ulid string.
            format: Ulid
            x-import: '@pagopa/ts-commons/lib/strings'
            example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        required:
          - configurationId
  RCConfigurationEnvironment:
    x-one-of: true
    allOf:
      - $ref: '#/definitions/RCConfigurationWithTestEnvironment'
      - $ref: '#/definitions/RCConfigurationWithProdEnvironment'
      - $ref: '#/definitions/RCConfigurationWithProdAndTestEnvironment'
  RCConfigurationWithTestEnvironment:
    type: object
    properties:
      testEnvironment:
        $ref: '#/definitions/RCConfigurationTestEnvironment'
    required:
      - testEnvironment
  RCConfigurationWithProdEnvironment:
    type: object
    properties:
      prodEnvironment:
        $ref: '#/definitions/RCConfigurationProdEnvironment'
    required:
      - prodEnvironment
  RCConfigurationWithProdAndTestEnvironment:
    type: object
    properties:
      prodEnvironment:
        $ref: '#/definitions/RCConfigurationProdEnvironment'
      testEnvironment:
        $ref: '#/definitions/RCConfigurationTestEnvironment'
    required:
      - prodEnvironment
      - testEnvironment
  RCConfigurationProdEnvironment:
    type: object
    properties:
      baseUrl:
        type: string
        minLength: 1
        description: Base url of the server.
      detailsAuthentication:
        $ref: '#/definitions/RCAuthenticationConfig'
    required:
      - baseUrl
  RCAuthenticationConfig:
    type: object
    properties:
      headerKeyName:
        type: string
        minLength: 1
        description: header key name
      key:
        type: string
        minLength: 1
        description: authentication config key
      type:
        type: string
        minLength: 1
        description: authentication config type
      cert:
        $ref: '#/definitions/RCClientCert'
    required:
      - headerKeyName
      - key
      - type
  RCClientCert:
    type: object
    properties:
      clientCert:
        type: string
        minLength: 1
        description: authentication config client cert
      clientKey:
        type: string
        minLength: 1
        description: authentication config client key
      serverCa:
        type: string
        minLength: 1
        description: authentication config server ca
    required:
      - clientCert
      - clientKey
      - serverCa
  RCConfigurationTestEnvironment:
    allOf:
      - $ref: '#/definitions/RCConfigurationProdEnvironment'
      - type: object
        properties:
          testUsers:
            type: array
            items:
              $ref: '#/definitions/FiscalCode'
  NotificationType:
    type: string
    enum:
      - MESSAGE
      - REMINDER_READ
      - REMINDER_PAYMENT
      - REMINDER_PAYMENT_LAST
  NotificationInfo:
    type: object
    properties:
      notification_type:
        $ref: '#/definitions/NotificationType'
      fiscal_code:
        $ref: '#/definitions/FiscalCode'
      message_id:
        type: string
        minLength: 1
    required:
      - notification_type
      - fiscal_code
      - message_id
  ProblemJson:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |-
          An absolute URI that identifies the problem type. When dereferenced,
          it SHOULD provide human-readable documentation for the problem type
          (e.g., using HTML).
        default: about:blank
        example: https://example.com/problem/constraint-violation
      title:
        type: string
        description: |-
          A short, summary of the problem type. Written in english and readable
          for engineers (usually not suited for non technical stakeholders and
          not localized); example: Service Unavailable
      status:
        type: integer
        format: int32
        description: >-
          The HTTP status code generated by the origin server for this
          occurrence

          of the problem.
        minimum: 100
        maximum: 600
        exclusiveMaximum: true
        example: 200
      detail:
        type: string
        description: |-
          A human readable explanation specific to this occurrence of the
          problem.
        example: There was an error processing the request
      instance:
        type: string
        format: uri
        description: >-
          An absolute URI that identifies the specific occurrence of the
          problem.

          It may or may not yield further information if dereferenced.
  FiscalCode:
    type: string
    description: User's fiscal code.
    format: FiscalCode
    x-import: '@pagopa/ts-commons/lib/strings'
    example: SPNDNL80R13C555X
securityDefinitions:
  SubscriptionKey:
    type: apiKey
    name: X-Functions-Key
    in: header
    description: The API key obtained through the developer portal.
